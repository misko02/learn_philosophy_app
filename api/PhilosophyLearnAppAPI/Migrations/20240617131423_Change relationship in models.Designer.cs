// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhilosophyLearnAppAPI.Data;

#nullable disable

namespace PhilosophyLearnAppAPI.Migrations
{
    [DbContext(typeof(PhilosophyLearnAppAPIContext))]
    [Migration("20240617131423_Change relationship in models")]
    partial class Changerelationshipinmodels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PhilosophyLearnAppAPI.Models.Question", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizId"));

                    b.Property<string>("Answers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CorrectAnswerIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuizId1")
                        .HasColumnType("int");

                    b.HasKey("QuizId");

                    b.HasIndex("QuizId1");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("PhilosophyLearnAppAPI.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopicId")
                        .IsUnique();

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("PhilosophyLearnAppAPI.Models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Site");
                });

            modelBuilder.Entity("PhilosophyLearnAppAPI.Models.Statistics", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuizzesPassed")
                        .HasColumnType("int");

                    b.Property<int>("QuizzesTaken")
                        .HasColumnType("int");

                    b.Property<int>("TopicsFinished")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuestionsAnswered")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("PhilosophyLearnAppAPI.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TopicId");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("PhilosophyLearnAppAPI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PhilosophyLearnAppAPI.Models.Question", b =>
                {
                    b.HasOne("PhilosophyLearnAppAPI.Models.Quiz", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuizId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhilosophyLearnAppAPI.Models.Quiz", b =>
                {
                    b.HasOne("PhilosophyLearnAppAPI.Models.Topic", null)
                        .WithOne("Quiz")
                        .HasForeignKey("PhilosophyLearnAppAPI.Models.Quiz", "TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhilosophyLearnAppAPI.Models.Site", b =>
                {
                    b.HasOne("PhilosophyLearnAppAPI.Models.Topic", null)
                        .WithMany("Sites")
                        .HasForeignKey("TopicId");
                });

            modelBuilder.Entity("PhilosophyLearnAppAPI.Models.Statistics", b =>
                {
                    b.HasOne("PhilosophyLearnAppAPI.Models.User", null)
                        .WithOne("UserStatistics")
                        .HasForeignKey("PhilosophyLearnAppAPI.Models.Statistics", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhilosophyLearnAppAPI.Models.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("PhilosophyLearnAppAPI.Models.Topic", b =>
                {
                    b.Navigation("Quiz")
                        .IsRequired();

                    b.Navigation("Sites");
                });

            modelBuilder.Entity("PhilosophyLearnAppAPI.Models.User", b =>
                {
                    b.Navigation("UserStatistics")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
